package jda.jayson.guilds.all.commands.other;

import com.jayson.nubx.NubxURL;
import jda.jayson.Nubx;

import jda.jayson.file.JSON;
import jda.jayson.id.References;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.Message;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import org.apache.commons.io.FileUtils;
import org.json.JSONObject;

import javax.print.attribute.HashAttributeSet;
import javax.xml.ws.Response;
import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.stream.Collectors;


public class CommandPortfolio {

    public static void onEvent(MessageReceivedEvent event) {
        Message msg = event.getMessage();
        String content = msg.getContentRaw();
        String[] argument = content.split(" ");
        if(content.equalsIgnoreCase("!portfolio create")) {
            if(msg.getAttachments().size() > 0) {
                if(Objects.requireNonNull(msg.getAttachments().get(0).getFileExtension()).equalsIgnoreCase("json")) {
                    new File("bot/portfolios").mkdirs();
                    NubxURL.create(msg.getAttachments().get(0).getUrl()).downloadToFile("bot/portfolios/" + event.getAuthor().getIdLong() + ".json");
                    event.getChannel().sendMessage(portfolio(event.getAuthor().getId(),event).build()).complete();
                } else {
                    event.getChannel().sendMessage("> Please provide a JSON file!").complete();
                }
            } else {
                event.getChannel().sendMessage("> Please provide a JSON file!").complete();
            }
        }
        if(content.contains("!portfolio") && !content.contains("create") && !content.contains("list")) {
            Member user;
            if(msg.getMentionedMembers().size() > 0) {
                user = msg.getMentionedMembers().get(0);
            } else {
               try { user = msg.getGuild().getMembersByName(argument[1],true).get(0); } catch (Exception e) { user = event.getGuild().getMemberById(argument[1]); }
            }
            if(user == null) {
                event.getChannel().sendMessage("> User not found!").complete();
                return;
            }
            event.getChannel().sendMessage(portfolio(user.getId(),event).build()).complete();
        }
        if(content.equalsIgnoreCase("!portfolio list")) {
            StringBuilder builder = new StringBuilder();
            List<File> files = (List<File>) FileUtils.listFiles(new File("bot/portfolios"), new String[]{"json"}, true);
            int i = 0;
            for (File file : files) {
                String id = file.getName().replaceAll(".json","");
                i++;
                if(builder.length() < 1500) {
                    try {
                        builder.append("`").append(event.getGuild().getMemberById(id).getUser().getName()).append("` `[").append(id).append("]`");
                    } catch (Exception exc) {
                        JSON.load(id);
                        builder.append("`").append(References.discord_name).append("` [*").append(id).append("*]");
                    }
                }
                if(builder.length() > 1499) {
                    event.getChannel().sendMessage(builder).complete();
                    builder = new StringBuilder();
                }
                if(i != files.size()) {
                    builder.append(",");
                }
            }
            event.getChannel().sendMessage(builder).complete();
        }
    }

    private static EmbedBuilder portfolio(String id, MessageReceivedEvent event) {
        EmbedBuilder builder = new EmbedBuilder();
        load(id,builder);
        builder.setTitle(event.getGuild().getMemberById(id).getUser().getName() + "'s Portfolio");
        File file = new File("bot/portfolios/" + id + ".json");
        if (file.exists()) {
            String c = null;
            try {
                c = FileUtils.readFileToString(file, "utf-8");
            } catch (IOException e) {
                Nubx.logger_json.error(e);
                e.printStackTrace();
            }
            assert c != null;
            JSONObject json = new JSONObject(c);
            if(json.has("thumbnail")) {
                String thumbnail = json.getString("thumbnail");
                thumbnail = thumbnail.replaceAll("%AVATAR%", Objects.requireNonNull(Objects.requireNonNull(event.getGuild().getMemberById(id)).getUser().getAvatarUrl()));
                builder.setThumbnail(thumbnail);
            }
        }
        return builder;
    }
    private static void load(String id, EmbedBuilder builder) {
        File file = new File("bot/portfolios/" + id + ".json");
        if (file.exists()) {
            String content = null;
            try {
                content = FileUtils.readFileToString(file, "utf-8");
            } catch (IOException e) {
                Nubx.logger_json.error(e);
                e.printStackTrace();
            }
            try {
                JSONObject json = new JSONObject(content);
                for (String s : json.keySet()) {
                    if (!s.equalsIgnoreCase("fields") && !s.equalsIgnoreCase("") && !s.equalsIgnoreCase("thumbnail") && !s.equalsIgnoreCase("image")) {
                        builder.addField(s, json.get(s).toString(), true);
                    }
                }
                if(json.has("fields")) {
                    for (String fields : json.getJSONObject("fields").keySet()) {
                        builder.addField(fields, json.getJSONObject("fields").get(fields) + "", true);
                    }
                }
                    String jsonStr = json.getJSONObject("fields").keySet().stream()
                            .map(x -> "\"" + x + "\":\"" + x + "\"")
                            .collect(Collectors.joining(",", "{", "}"));
                    System.out.println(jsonStr);
            } catch (Exception ex) {
                Nubx.logger_json.error(ex);
            }

        }
    }
    private static void save(MessageReceivedEvent event) {
        JSONObject json = new JSONObject();
        json.put("thumbnail","%AVATAR%");
        json.put("image","%AVATAR%");
        Map objectHashMap = new LinkedHashMap<>();
        objectHashMap.put("Name","Jayson");
        objectHashMap.put("Age", 15);
        json.put("fields", objectHashMap);
        event.getChannel().sendMessage(json.toString()).complete();
    }
}
